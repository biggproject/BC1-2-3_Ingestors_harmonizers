Dt$t
Dt$I.obs <- weather_data$GHI_0
Dt$I.obs
weather_data[[sprintf("GHI_%s", seq(1,48)]]
sprintf("GHI_%s", seq(1,48)]
sprintf("GHI_%s", seq(1,48)
sprintf("GHI_%s", seq(1,48))
sprintf("GHI_%s", seq(1,48))
weather_data[[sprintf("GHI_%s", seq(1,48))]]
weather_data[sprintf("GHI_%s", seq(1,48)),]
weather_data
weather_data[,sprintf("GHI_%s", seq(1,48))]
weather_data[,sprintf("GHI_%s", seq(1,48))]
D$I
Dt$I <- weather_data[,sprintf("GHI_%s", seq(1,48))]
Dt$I
## ------------------------------------------------------------------------
##install.packages("onlineforecast_0.1.0.tar.gz")
library(onlineforecast)
library(RCurl)
library(jsonlite)
library(zoo)
library(padr)
library(pracma)
library(httr)
source("functions/forecast_and_update.R")
source("functions/train_model.R")
source("utils.R")
## ------------------------------------------------------------------------
## set the variables for a user:
user_id = "764e95f2-2489-54f2-930e-1e336168c6dc"
stationId = "42.20_2.50"
lat = 42.20
lon = 2.50
## get the middleware token:
client_id = "628208"
client_secret = "f6f00ac0c75dd8ad7504d8510b5f13c2d0c2a4dc0fb08649185077e4"
login = list(grant_type='client_credentials', client_id = client_id , client_secret = client_secret )
res = POST(url=url, body=login, encode="form", config(cainfo = "/Users/eloigabal/Desktop/217.182.160.171-bundle.cert.pem")
)
res = POST(url=url, body=login, encode="form", config(cainfo="/Users/eloigabal/Desktop/217.182.160.171-bundle.cert.pem"))
url
token_url =  "https://oauth.middleware.platform.flexcoop.eu/token"
res = POST(url=token_url, body=login, encode="form", config(cainfo="/Users/eloigabal/Desktop/217.182.160.171-bundle.cert.pem"))
service_token = content(res)$access_token
service_token
mongo_url <- NULL
mongo_collection <- NULL
m <- mongo(mongo_collection, url = mongo_url)
library(mongolite)
m <- mongo(mongo_collection, url = mongo_url)
library(mongolite)
m <- tryCatch(mongo(mongo_collection, url = mongo_url, error="no mongo settup")
)
m <- tryCatch(mongo(mongo_collection, url = mongo_url, error="no mongo settup"))
m <- tryCatch(mongo(mongo_collection, url = mongo_url))
m <- tryCatch(mongo(mongo_collection, url = mongo_url), error=function(){retunr(NA)})
m <- tryCatch(mongo(mongo_collection, url = mongo_url), error=function(cond){retunr(NA)})
m <- tryCatch(mongo(mongo_collection, url = mongo_url), error=function(cond){return(NA)})
m
install.packages("ggplot2")
x = "hola que tal"
strsplit(x," ",fixed=T)
x="hola\t1"
strsplit(x,"\t",fixed=T)
word, count = strsplit(x,"\t",fixed=T)
value = strsplit(x,"\t",fixed=T)
value[0]
value[1]
value[2]
value
unlist(strsplit(x,"\t",fixed=T))
value = unlist(strsplit(x,"\t",fixed=T))
value
value[1]
value[2]
p_word=NULL
p_word==NULL
p_word=
"fd"
if(p_word==NULL){p_word=value[1]}
p_word=NULL
if(p_word==NULL){p_word=value[1]}
if(is.null(p_word)){p_word=value[1]}
p_word
acc=0
acc += value[2]
acc = acc + value[2]
acc = acc + strtoi(value[2])
acc
value[1]==p_word
"aa" == "aa"
print(p_word, acc)
acc
print(p_word, acc)
print(c(p_word, acc))
print(paste0(p_word,"\t",acc))
cat(paste0(p_word,"\t",acc,"\n")
cat(p_word,"\t",acc,"\n")
cat(p_word,"\t",acc,"\n")
library(coro)
generate_abc <- generator(function() {
for (x in letters[1:3]) {
yield(x)
}
})
# Create a generator instance
abc <- generate_abc()
abc()
abc()
abc()
read_input <-generator(function(stdin){
prev_key=NULL
value_list <-c()
while(length(x <- readLines(stdin, n=1))>0) {
info <- unlist(strsplit(x,"\t",fixed=T))
if(is.null(prev_key)){prev_key<-info[1]}
if(info[1]==prev_key){
value_list <- c(value_list, info[2])
}else{
yield(list("key"=prev_key, "values"=value_list))
prev_key = info[1]
value_list <-c(info[2])
}
}
if(!is.null(prev_key)){
yield(list("key"=prev_key, "values"=value_list))
}
})
install.packages(coro)
install.packages("coro")
install.packages("reticulate")
v = b'\x80\x04\x95\x80\x00\x00\x00\x00\x00\x00\x00}\x94(\x8c\x06triple\x94]\x94(\x8c!https://sws.geonames.org/2510769/\x94\x8c-http://www.geonames.org/ontology#officialName\x94\x8c\x08Esp\xc3\xa2nye\x94e\x8c\x04meta\x94\x8c\x05graph\x94u.'
install.packages("rdflib")
View(device_pv)
library(rdflib)
rdfs <- c()
for (f in list.files(pattern=".*.ttl")){
doc <- system.file(f, package="redland")
rdfs<- c(rdfs,rdf_parse(doc, format="turtle"))
}
return(rdfs)
library(rdflib)
rdfs <- c()
for (f in list.files(pattern=".*.ttl")){
doc <- system.file(f, package="redland")
rdfs<- c(rdfs,rdf_parse(doc, format="turtle"))
}
rdfs[1]
rdfs
list.files(pattern=".*.ttl")
setwd("~/Desktop/map-r-docker")
list.files(pattern=".*.ttl")
rdfs <- c()
for (f in list.files(pattern=".*.ttl")){
doc <- system.file(f, package="redland")
rdfs<- c(rdfs,rdf_parse(doc, format="turtle"))
}
rdfs
rdfs[0]
rdfs[1]
rdf <-rdfs[1]
rdf_query(rdf,"SELECT ?s WHERE {?s a bigg:Building}")
rdf
f
rdf_parse(f, format="turtle")
rdf <- rdf_parse(f, format="turtle")
rdf
rdf_query(rdf,"SELECT ?s WHERE {?s a bigg:Building}")
type(rdf)
typeof(rdf)
rdf_query(rdf,"SELECT ?s WHERE {?s a bigg:Building}")
rdf <- rdf_parse(f)
rdf_query(rdf,"SELECT ?s WHERE {?s a bigg:Building}")
rdf <- rdf_parse(f, format="turtle")
rdf_query(rdf,"SELECT ?s WHERE {?s a bigg:Building}")
rdf_query(rdf,"SELECT ?s WHERE {?s rdf:type bigg:Building}")
rdf_query(rdf,"SELECT ?s WHERE {?s a bigg:Building}")
sparql <-
'PREFIX bigg: <http://bigg-project.eu/ontology#>
SELECT ?s
WHERE { ?s a bigg:Building }'
rdf_query(rdf,sparql)
sparql <-
'PREFIX bigg: <http://bigg-project.eu/ontology#>
SELECT ?s ?p ?o
WHERE { ?s ?p ?o . }'
sparql <-
'PREFIX bigg: <http://bigg-project.eu/ontology#>
SELECT ?s ?p ?o
WHERE {
?building ?p ?s .
?s (<>|!<>)+ ?o
}'
rdf_query(rdf,sparql)
sparql <- "
PREFIX bigg: <http://bigg-project.eu/ontology#>
construct {
?s ?p ?o.
?o ?op ?oo.
?oo ?oop ?ooo.
?ooo ?ooop ?oooo.
?oooo ?oooop ?ooooo.
}
where {
bind(building:https://icaen.cat#BUILDING-03813 as ?s)
?s ?p ?o.
optional {
?o ?op ?oo.
optional {
?oo ?oop ?ooo.
optional {
?ooo ?ooop ?oooo.
optional {
?oooo ?oooop ?ooooo.
}
}
}
}
}
"
rdf_query(rdf,sparql)
sparql <- "
PREFIX bigg: <http://bigg-project.eu/ontology#>
construct {
?s ?p ?o.
?o ?op ?oo.
?oo ?oop ?ooo.
?ooo ?ooop ?oooo.
?oooo ?oooop ?ooooo.
}
where {
bind(building:<https://icaen.cat#BUILDING-03813> as ?s)
?s ?p ?o.
optional {
?o ?op ?oo.
optional {
?oo ?oop ?ooo.
optional {
?ooo ?ooop ?oooo.
optional {
?oooo ?oooop ?ooooo.
}
}
}
}
}
"
rdf_query(rdf,sparql)
sparql <- "
PREFIX bigg: <http://bigg-project.eu/ontology#>
construct {
?s ?p ?o.
?o ?op ?oo.
?oo ?oop ?ooo.
?ooo ?ooop ?oooo.
?oooo ?oooop ?ooooo.
}
where {
bind(<https://icaen.cat#BUILDING-03813> as ?s)
?s ?p ?o.
optional {
?o ?op ?oo.
optional {
?oo ?oop ?ooo.
optional {
?ooo ?ooop ?oooo.
optional {
?oooo ?oooop ?ooooo.
}
}
}
}
}
"
rdf_query(rdf,sparql)
sparql <- "
PREFIX bigg: <http://bigg-project.eu/ontology#>
construct {
?s ?p ?o.
?o ?op ?oo.
?oo ?oop ?ooo.
?ooo ?ooop ?oooo.
?oooo ?oooop ?ooooo.
}
where {
filter(?s=<https://icaen.cat#BUILDING-03813> as ?s)
?s ?p ?o.
optional {
?o ?op ?oo.
optional {
?oo ?oop ?ooo.
optional {
?ooo ?ooop ?oooo.
optional {
?oooo ?oooop ?ooooo.
}
}
}
}
}
"
rdf_query(rdf,sparql)
sparql <- "
PREFIX bigg: <http://bigg-project.eu/ontology#>
construct {
?s ?p ?o.
?o ?op ?oo.
?oo ?oop ?ooo.
?ooo ?ooop ?oooo.
?oooo ?oooop ?ooooo.
}
where {
filter(str(?s)="https://icaen.cat#BUILDING-03813")
sparql <- "
PREFIX bigg: <http://bigg-project.eu/ontology#>
construct {
?s ?p ?o.
?o ?op ?oo.
?oo ?oop ?ooo.
?ooo ?ooop ?oooo.
?oooo ?oooop ?ooooo.
}
where {
?s ?p ?o.
filter(str(?s)='https://icaen.cat#BUILDING-03813')
optional {
?o ?op ?oo.
optional {
?oo ?oop ?ooo.
optional {
?ooo ?ooop ?oooo.
optional {
?oooo ?oooop ?ooooo.
}
}
}
}
}
"
rdf_query(rdf,sparql)
sparql <- "
PREFIX bigg: <http://bigg-project.eu/ontology#>
select {
?s ?p ?o.
?o ?op ?oo.
?oo ?oop ?ooo.
?ooo ?ooop ?oooo.
?oooo ?oooop ?ooooo.
}
where {
?s ?p ?o.
filter(str(?s)='https://icaen.cat#BUILDING-03813')
optional {
?o ?op ?oo.
optional {
?oo ?oop ?ooo.
optional {
?ooo ?ooop ?oooo.
optional {
?oooo ?oooop ?ooooo.
}
}
}
}
}
"
rdf_query(rdf,sparql)
sparql <- "
PREFIX bigg: <http://bigg-project.eu/ontology#>
construct {
?s ?p ?o.
?o ?op ?oo.
?oo ?oop ?ooo.
?ooo ?ooop ?oooo.
?oooo ?oooop ?ooooo.
}
where {
?s ?p ?o.
filter(str(?s)='https://icaen.cat#BUILDING-03813')
optional {
?o ?op ?oo.
optional {
?oo ?oop ?ooo.
optional {
?ooo ?ooop ?oooo.
optional {
?oooo ?oooop ?ooooo.
}
}
}
}
}
"
rdf_query(rdf,sparql)
buildingsRdf <- rdf_parse("tmpn8_dmhrv.ttl", format="turtle")
buildingsRdf
if(buildings_Rdf){}
buildingsRdf <- rdf_parse("tmpn8_dmhrv.ttl", format="turtle")
length(buildingsRdf)
buildingsRdf <- rdf_parse("/var/folders/hz/3srn_dv51t5b5mljrdtsyvgm0000gn/T/tmpr2288w3q.ttl", format="turtle")
length(buildingsRdf)
setwd("~/Developement/CIMNE/bigg_entrack/analytics/LongitudinalBenchmarking/reduce")
library(magrittr)
library(rdflib)
library(reticulate)
library(data.table)
settings <- fromJSON("Rconfig.json")
library(magrittr)
library(rdflib)
library(reticulate)
library(data.table)
library(jsonlite)
settings <- fromJSON("Rconfig.json")
settings
source("read_input.R")
source("module.R")
settings
settings$PYTHON3_BIN
library(qgam)
imports = c("biggr", "data.table","jsonlite","ggplot2", "lubridate",
"gridExtra", "plotly", "padr", "htmlwidgets", "carrier","mlflow","fs",
"tidyr","digest")
for(pack in imports){suppressMessages(suppressWarnings(library(pack, character.only = TRUE)))}
source("HourlyDynamicModel.R")
source("HourlyBaselineModel.R")
source("MonthlyDynamicModel.R")
source("MonthlyBaselineModel.R")
source("YearlyDynamicModel.R")
settings <- fromJSON("Settings.json")
settings <- append(settings,fromJSON("Rconfig.json"))
library(magrittr)
library(rdflib)
library(reticulate)
library(data.table)
library(jsonlite)
settings <- fromJSON("Rconfig.json")
source("read_input.R")
source("module.R")
use_python(settings$PYTHON3_BIN, required = T)
source_python("unpickle.py")
library(magrittr)
library(rdflib)
library(reticulate)
library(data.table)
library(jsonlite)
settings <- fromJSON("Rconfig.json")
source("read_input.R")
source("module.R")
use_python(settings$PYTHON3_BIN, required = T)
source_python("unpickle.py")
source_python("extract_building.py")
x <- NULL
is.null(x)
setwd("~/Developement/CIMNE/bigg_entrack/analytics/LongitudinalBenchmarking/reduce")
dir.create("resultstest")
file.create("resultstest/test.txt")
file.create("resultstest/test1.txt")
unlink(resultstest, recursive=TRUE)
unlink("resultstest", recursive=TRUE)
dir.create("resultstest")
unlink("resultstest", recursive=TRUE)
write_rdf(object = results$results_rdf,
file = paste(settings$OutputDataDirectory,
sprintf("%s.ttl", digest(
paste0(buildingSubject, unlist(settings$Indicators),
energyType, collapse="~"),
algo = "sha256", serialize = T)), sep="/"))
settings
settings$Indicators
buildingSubject
buildingSubject = "https://icaen.cat#BUILDING-00001"
strbefore(buildingSubject,"#")
str_split(buildingSubject, "#")
str_split(
)
strsplit(buildingSubject, "#", fixed=T)
strsplit(buildingSubject, "#", fixed=T)[0]
strsplit(buildingSubject, "#", fixed=T)[1]
s = strsplit(buildingSubject, "#", fixed=T)
s
s[[1]][1]
strsplit(buildingSubject, "#", fixed=T)[[1]][1]
settings <- fromJSON("Settings.json")
settings <- append(settings,fromJSON("Rconfig.json"))
settings <- fromJSON("Settings.json")
settings <- append(settings,fromJSON("Rconfig.json"))
buildingSubject
settings$userMap
settings$userMap[strsplit(buildingSubject, "#", fixed=T)[[1]][1]]
# load files to neo4j
user <- settings$userMap[strsplit(buildingSubject, "#", fixed=T)[[1]][1]]
user
settings$userMap[strsplit(buildingSubject, "#", fixed=T)[[1]][1]][1]
user
typeof(user)
unlist(user)
unlist(user)[1]
unlist(user)[,1]
unlist(user)
unlist(user)[1]
unlist(user)[1][1]
unlist(user)[1][1][1]
settings$userMap[strsplit(buildingSubject, "#", fixed=T)[[1]][1]]
settings$userMap[strsplit(buildingSubject, "#", fixed=T)[[1]][1]][[1]]
# load files to neo4j
user <- settings$userMap[strsplit(buildingSubject, "#", fixed=T)[[1]][1]][[1]]
user
setwd("~/Developement/CIMNE/bigg_entrack/analytics/LongitudinalBenchmarking/reduce")
getwd()
source("~/Developement/CIMNE/bigg_entrack/analytics/LongitudinalBenchmarking/reducer_lib/reducer.R", echo=TRUE)
paste0(getwd(),"/reducer_lib")
